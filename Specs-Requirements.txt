Software Specification and Requirements for
Sewer Logic
Version 0 unapproved
Prepared by Brandon Helmericks and Hannah Tsunemori
University of Alaska Anchorage
02/05/2017

Table of Contents........................................0
Revision History.........................................0
1.	Introduction.........................................0
	1.1	Purpose............................................0
	1.2	Document Conventions...............................0		//unknown
	1.3	Intended Audience and Reading Suggestions..........0   
	1.4	Product Scope......................................0                               
	1.5	References.........................................0		//unknown
2.	Overall Description..................................0                         
	2.1	Product Perspective................................0                         
	2.2	Product Functions..................................0                           
	2.3	User Classes and Characteristics...................0           
	2.4	Operating Environment..............................0                       
	2.5	Design and Implementation Constraints..............0       
	2.6	User Documentation.................................0
	2.7	Assumptions and Dependencies.......................0
3.	External Interface Requirements......................0
	3.1	User Interfaces....................................0                             
	3.2	Hardware Interfaces................................0                         
	3.3	Software Interfaces................................0
	3.4	Communications Interfaces..........................0		//unknown
4.	System Features......................................0
	4.1	Serial Communication and Control...................0
	4.2	Datalogging and Modeling...........................0
	4.2	Digital Display....................................0
	4.2	Consulting.........................................0
5.	Other Nonfunctional Requirements.....................0
	5.1	Performance Requirements...........................0
	5.2	Safety Requirements................................0
	5.3	Security Requirements..............................0
	5.4	Software Quality Attributes........................0
	5.5	Business Rules.....................................0
6.	Other Requirements...................................0
Appendix A: Glossary.....................................0
Appendix B: Analysis Models..............................0
Appendix C: To Be Determined List........................0

1.	Introduction

1.1	Purpose 
The Graphical User Interface for the Dotson Lab Alaska Water Sewage Challenge acts as a way for a homeowner to interact 
with the Alaska Water Sewage Challenge project that is being created in Dotson Lab. The User Interface for the Dotson Lab 
Alaska Water Sewage Challenge is hereafter refered to as "Interface". The Dotson Lab Alaska Water Sewage Challenge is 
hereafter refered to as "water/wastewater system". The Interface will:
  (a) Maintain Serial Communication and Control
  (b) Datalogging and Modeling
  (c) Display features
  (d) Produce good data (Consulting)
  
  //INSERT PARAGRAPH ABOUT EACH INDIVIDUAL FEATURE HERE?

1.2	Document Conventions

  //Unknown

<Describe any standards or typographical conventions that were followed when writing this SRS, such as fonts or 
highlighting that have special significance. For example, state whether priorities  for higher-level requirements are 
assumed to be inherited by detailed requirements, or whether every requirement statement is to have its own priority.>

1.3	Intended Audience and Reading Suggestions
This document is for the developers and Dotson Lab hereinafter referred to as "the user".
The developers will be able to determine how to meet the requirements from this document. The user will be able to 
determine what to expect they can do with this product and how it works to meet their needs.
  
The document is orgainzed in the following order: introductory infomrmation, product creation, external interactions, 
product features, and non-functional requirements.

//What is most useful for us developers to refer back to? For the user?

1.4	Product Scope
//The Interface will connect the user to the control and monitoring Arduino in the water/wastewater system. 
From this arduino chip the Interface will allow a user to view water levels and flow as well as if the water/wastewater 
system needs to be emptied. The Interface will allow monitoring and data logging to users. It also acts so that users do not 
need to press mechanical buttons to manage the system. The data logging feature is specifically designed for research 
purposes of the user.


1.5	References

  //Unknown

<List any ther documents or Web addresses to which this SRS refers. These may include user interface style guides, 
contracts, standards, system requirements specifications, use case documents, or a vision and scope document. Provide 
enough information so that the reader could access a copy of each reference, including title, author, version number, 
date, and source or location.>

2.	Overall Description
2.1	Product Perspective
The Interface is to be used with the water/wastewater system. It is to read information from the Arduino chip that will 
control and monitor the system on a hardware level. The interface will be constructed on a touchscreen interface attached to 
a Raspberry Pi.

  //anything else it connects to/interactions?

2.2	Product Functions
  (a) Maintain Serial Communication and Control
      This is needed so that the Interface can present and store data.
  (b) Datalogging and Modeling
      This is a requirement for the user who may have other research uses for previous data.
      The datalogs will be accessable through an SD card provided by the user.
      This also will alow data to be presented in a readable format to the reader.
  (c) Display features
      This will allow users to interact and read the data on the touch screen device.
      This will include determining what information to show by selecting a user type.
  (d) Produce good data (Consulting)
      This will be achieved through consulting for the client as the code on the Arduino the Interface reads from will
      be corrected as needed.

2.3	User Classes and Characteristics

  //there is a "homeowner" and "advanced homeowner" as well as our research group users. Most important may need to 
  be changed.
  
  There are three classes of users that will use the Interface. These users will be refered to as "basic user", "advanced 
  user", and "research user".
  
  Basic User Needs:
    (1) Notification of when to empty waste
    (2) Notification when there is a problem identified
  Advanced User Needs:
    (1) All Basic User Needs
    (2) Display of all water levels measured in system
    (3) Display of all valve positions in system
    (4) Display of pressures measured in system
    (5) Display of power to components
    (6) Button sequence
    (7) Clear annoations (?)
  Research User Needs:
    (1) All Basic User Needs
    (2) Datalogging of measured data in text files
    (3) Consulting on code written for system
    
  For the purposes of this document the basic user needs are of the highest importance as all other user needs include 
  those of the basic user.

2.4	Operating Environment

The interface will be running on a Raspberry Pi 3 Model B with a 7" touchscreen display (800 x 480 pixels). The Raspberry Pi
will be running the Raspbian version ??? operating system. The Raspberry Pi will need to communicate with code written by
the user running on the Arduino through a serial connection.


2.5	Design and Implementation Constraints

  //issues include unknown code interactions, working in parallel with water/wastewater system that is still in design
  //must interact with arduino
  //connected via cord as given
  //memory to sd card
  //NO DATABASES as per client request
  //Server available
  //this allows client to maintain software as needed
  //client side will need modification as per request of client (consulting)

<Describe any items or issues that will limit the options available to the developers. These might include: corporate or 
regulatory policies; hardware limitations (timing requirements, memory requirements); interfaces to other applications; 
specific technologies, tools, and databases to be used; parallel operations; language requirements; communications 
protocols; security considerations; design conventions or programming standards (for example, if the customer’s 
organization will be responsible for maintaining the delivered software).>

2.6	User Documentation

  //user manuals?? We didn't ask if they wanted this, but probably should have
  //comments in code
  //minimum readme files for user

<List the user documentation components (such as user manuals, on-line help, and tutorials) that will be delivered along 
with the software. Identify any known user documentation delivery formats or standards.>

2.7	Assumptions and Dependencies

  //assumed time constraint on advising client per week
  //assumed the interface takes priority
  //assumed data read in is good

<List any assumed factors (as opposed to known facts) that could affect the requirements stated in the SRS. These could 
include third-party or commercial components that you plan to use, issues around the development or operating environment, 
or constraints. The project could be affected if these assumptions are incorrect, are not shared, or change. Also identify 
any dependencies the project has on external factors, such as software components that you intend to reuse from another 
project, unless they are already documented elsewhere (for example, in the vision and scope document or the project plan).>

3.	External Interface Requirements

3.1	User Interfaces

The primary user interface will be the 7" Raspberry Pi Touchscreen. The dimensions of the touchscreen are 
194mm x 110mm x 20mm (800 x 480 pixels).

  //What kind of gui? It must fit in the touchscreen
  //What kind of buttons? Should there be a help? We already know we need a "normal" and "advanced" button
  //Data needing to be displayed and modeled:
  Under Basic User Tab:
    (1) Notification of when to empty waste
    (2) Notification when there is a problem identified
  Under Advanced User Tab:
    (1) All Basic User Needs
    (2) Display of all water levels measured in system
    (3) Display of all valve positions in system
    (4) Display of pressures measured in system
    (5) Display of power to components
    (6) Button sequence
    (7) Clear annoations (?)

3.2	Hardware Interfaces
Serial connection between the Arduino and Raspberry Pi (USB?, GPIO?) used to send data/commands. Perfered code language 
is Java and Python for user readability but still TBD depending on hardware support. The GUI for the interface will be 
displayed on a 7" touchscreen display connected to the Raspberry Pi via a DSI ribbon cable.

3.3	Software Interfaces

  //How is it interacting with the software written on the Arduino? Read/Write? What kind of data? What is the purpose?

<Describe the connections between this product and other specific software components (name and version), including 
databases, operating systems, tools, libraries, and integrated commercial components. Identify the data items or messages 
coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of 
communications. Refer to documents that describe detailed application programming interface protocols. Identify data that 
will be shared across software components. If the data sharing mechanism must be implemented in a specific way 
(for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.>

3.4	Communications Interfaces

  //There aren't any communication interfaces, or at least not that I'm aware of.

<Describe the requirements associated with any communications functions required by this product, including e-mail, 
web browser, network server communications protocols, electronic forms, and so on. Define any pertinent message 
formatting. Identify any communication standards that will be used, such as FTP or HTTP. Specify any communication 
security or encryption issues, data transfer rates, and synchronization mechanisms.>

4.	System Features
4.1	Serial Communication and Control

4.1.1	Description and Priority

The serial communication allows the interface running on the Raspberry Pi to communicate and send commands/requests to 
the Arduino that controls the water/wastewater system.
This feature has a very high priority as without it the interface cannot operate.

4.1.2	Stimulus/Response Sequences
<List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will 
correspond to the dialog elements associated with use cases.>

4.1.3	Functional Requirements
REQ-1:	Allow the interface running on the Raspberry Pi to control valve positions, stepper motors, and pumps through
        the Arduino.
REQ-2:	Allow the Raspberry Pi to request sensor data from the Arduino (flow rates, temperatures, potentiometers) at
        regular intervals.

4.2	Data Logging and Monitoring

4.2.1	Description and Priority
Sensor data and control operations need to be logged to files as clear text at regular intervals. Some data will also be
monitored in order to determine the health and status of the water/wastewater system.
This feature has a high priority considering the water/wastewater system is an academic project.

    //I think this is also of high priority since it allows something to be displayed. 
    //Client may not feel this is as high depending upon what they can code.

4.2.2	Stimulus/Response Sequences
<List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will 
correspond to the dialog elements associated with use cases.>

4.2.3	Functional Requirements
REQ-1:	Periodically request sensor data (flow rates, temperatures, potentiometers) from water/wastewater system's Arduino
        and log them to a file as clear text on the Raspberry Pi's SD card.
REQ-2:  Log all operational commands (valve open/close, pump on/off) issued by the interface to a file as clear text on the
        Raspberry Pi's SD card.

4.3	Display Features (GUI)

4.3.1	Description and Priority
The GUI will be the primary way for the user to interact with the interface through the Raspberry Pi touchscreen. The GUI
will present all relevant information about the system and allow the user to issue commands to the system.
This feature has a medium priority.

  //This seems like a Medium priority as it can be done in a purely functional way or in a more "user friendly" way

4.3.2	Stimulus/Response Sequences
<List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will 
correspond to the dialog elements associated with use cases.>

4.3.3	Functional Requirements
REQ-1:	Display relevant information depending on the mode (Specifics TBD):
          (a) Homeowner Mode: High level information (system status, notify when to empty waste tank)
          (b) Advanced Mode: Detailed information about the system (valve positions, flow rates, temperatures, tank levels)
REQ-2:  Provide a graphical interface allowing the user to control the water/wastewater system (valves, stepper motors,
        pump) when in advanced mode.

4.4	Consulting

4.4.1	Description and Priority

  // this is our lowest Priority. This may even fit better under section 5, Nonfucntional Requirements.

<Provide a short description of the feature and indicate whether it is of High, Medium, or Low priority. You could also 
include specific priority component ratings, such as benefit, penalty, cost, and risk (each rated on a relative scale 
from a low of 1 to a high of 9).>

4.4.2	Stimulus/Response Sequences
<List the sequences of user actions and system responses that stimulate the behavior defined for this feature. These will 
correspond to the dialog elements associated with use cases.>

4.4.3	Functional Requirements
<Itemize the detailed functional requirements associated with this feature. These are the software capabilities that 
must be present in order for the user to carry out the services provided by the feature, or to execute the use case. 
Include how the product should respond to anticipated error conditions or invalid inputs. Requirements should be 
concise, complete, unambiguous, verifiable, and necessary. Use “TBD” as a placeholder to indicate when necessary 
information is not yet available.>

<Each requirement should be uniquely identified with a sequence number or a meaningful tag of some kind.>

REQ-1:	
REQ-2:

5.	Other Nonfunctional Requirements

5.1	Performance Requirements

  //We require the data that is being read be good data
  
<If there are performance requirements for the product under various circumstances, state them here and explain their 
rationale, to help the developers understand the intent and make suitable design choices. Specify the timing 
relationships for real time systems. Make such requirements as specific as possible. You may need to state performance 
requirements for individual functional requirements or features.>

5.2	Safety Requirements
<Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of 
the product. Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to 
any external policies or regulations that state safety issues that affect the product’s design or use. Define any 
safety certifications that must be satisfied.>

5.3	Security Requirements
<Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data 
used or created by the product. Define any user identity authentication requirements. Refer to any external policies or 
regulations containing security issues that affect the product. Define any security or privacy certifications that must 
be satisfied.>

5.4	Software Quality Attributes
<Specify any additional quality characteristics for the product that will be important to either the customers or the 
developers. Some to consider are: adaptability, availability, correctness, flexibility, interoperability, 
maintainability, portability, reliability, reusability, robustness, testability, and usability. Write these to be 
specific, quantitative, and verifiable when possible. At the least, clarify the relative preferences for various 
attributes, such as ease of use over ease of learning.>

5.5	Business Rules
<List any operating principles about the product, such as which individuals or roles can perform which functions 
under specific circumstances. These are not functional requirements in themselves, but they may imply certain functional 
requirements to enforce the rules.>

6.	Other Requirements
<Define any other requirements not covered elsewhere in the SRS. This might include database requirements, 
internationalization requirements, legal requirements, reuse objectives for the project, and so on. Add any new 
sections that are pertinent to the project.>

Appendix A: Glossary
<Define all the terms necessary to properly interpret the SRS, including acronyms and abbreviations. You may wish to 
build a separate glossary that spans multiple projects or the entire organization, and just include terms specific to 
a single project in each SRS.>

Appendix B: Analysis Models
<Optionally, include any pertinent analysis models, such as data flow diagrams, class diagrams, state-transition 
diagrams, or entity-relationship diagrams.>

Appendix C: To Be Determined List
<Collect a numbered list of the TBD (to be determined) references that remain in the SRS so they can be tracked to closure.>
